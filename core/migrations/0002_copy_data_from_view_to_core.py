# Generated by Django 5.0.6 on 2024-07-09 02:08
#   and modified by Linlin Yan later

from django.db import migrations

def copy_data_from_view_to_core(apps, schema_editor):

    # UserProfile
    UserProfilePkMap = {}
    ViewUserProfile = apps.get_model('view', 'UserProfile')
    CoreUserProfile = apps.get_model('core', 'UserProfile')
    for view_user in ViewUserProfile.objects.all().order_by('pk'):
        core_user = CoreUserProfile(
            auth_user=view_user.auth_user,
            create_time=view_user.create_time,
            nickname=view_user.nickname,
            wx_openid=view_user.wx_openid,
            wx_unionid=view_user.wx_unionid,
            debug_mode=view_user.debug_mode
        )
        core_user.save()
        UserProfilePkMap[view_user.pk] = core_user.pk

    # UserAlias
    ViewUserAlias = apps.get_model('view', 'UserAlias')
    CoreUserAlias = apps.get_model('core', 'UserAlias')
    for view_alias in ViewUserAlias.objects.all().order_by('pk'):
        core_alias = CoreUserAlias(
            user=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_alias.user.pk]),
            alias=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_alias.alias.pk])
        )
        core_alias.save()

    # UserSession
    # no need to copy UserSession

    # Paper & PaperTranslation
    PaperPkMap = {}
    ViewPaper = apps.get_model('view', 'Paper')
    CorePaper = apps.get_model('core', 'Paper')
    for view_paper in ViewPaper.objects.all().order_by('pk'):
        core_paper = CorePaper(
            create_time=view_paper.create_time,
            update_time=view_paper.update_time,
            title=view_paper.title,
            journal=view_paper.journal,
            pub_date=view_paper.pub_date,
            pub_year=view_paper.pub_year,
            authors=view_paper.authors,
            affiliations=view_paper.affiliations,
            abstract=view_paper.abstract,
            keywords=view_paper.keywords,
            urls=view_paper.urls,
            doi=view_paper.doi,
            pmid=view_paper.pmid,
            arxiv_id=view_paper.arxiv_id,
            pmcid=view_paper.pmcid,
            cnki_id=view_paper.cnki_id,
            language=view_paper.language
        )
        core_paper.save()
        PaperPkMap[view_paper.pk] = core_paper.pk

        if hasattr(view_paper, 'translation'):
            CorePaperTranslation = apps.get_model('core', 'PaperTranslation')
            CorePaperTranslation(
                title_cn=view_paper.translation.title_cn,
                abstract_cn=view_paper.translation.abstract_cn,
                paper=core_paper
            ).save()

    LabelPkMap = {}
    ViewLabel = apps.get_model('view', 'Label')
    CoreLabel = apps.get_model('core', 'Label')
    for view_label in ViewLabel.objects.all().order_by('pk'):
        core_label = CoreLabel(
            name=view_label.name,
            color=view_label.color,
            desc=view_label.desc,
            user=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_label.user.pk])
        )
        core_label.save()
        LabelPkMap[view_label.pk] = core_label.pk

    ViewPaperTracking = apps.get_model('view', 'PaperTracking')
    CorePaperTracking = apps.get_model('core', 'PaperTracking')
    for view_tracking in ViewPaperTracking.objects.all().order_by('pk'):
        core_tracking = CorePaperTracking(
            type=view_tracking.type,
            value=view_tracking.value,
            memo=view_tracking.memo,
            label=CoreLabel.objects.get(pk=LabelPkMap[view_tracking.label.pk]),
            user=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_tracking.user.pk])
        )
        core_tracking.save()

    ViewRecommendation = apps.get_model('view', 'Recommendation')
    CoreRecommendation = apps.get_model('core', 'Recommendation')
    for view_recommendation in ViewRecommendation.objects.all().order_by('pk'):
        core_recommendation = CoreRecommendation(
            create_time=view_recommendation.create_time,
            read_time=view_recommendation.read_time,
            source=view_recommendation.source,
            user=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_recommendation.user.pk]),
            paper=CorePaper.objects.get(pk=PaperPkMap[view_recommendation.paper.pk])
        )
        core_recommendation.save()
        core_recommendation.labels.set([CoreLabel.objects.get(pk=LabelPkMap[label.pk]) for label in view_recommendation.labels.all()])

    ReviewPkMap = {}
    ViewReview = apps.get_model('view', 'Review')
    CoreReview = apps.get_model('core', 'Review')
    for view_review in ViewReview.objects.all().order_by('pk'):
        core_review = CoreReview(
            create_time=view_review.create_time,
            update_time=view_review.update_time,
            delete_time=view_review.delete_time,
            comment=view_review.comment,
            paper=CorePaper.objects.get(pk=PaperPkMap[view_review.paper.pk]),
            creator=CoreUserProfile.objects.get(pk=UserProfilePkMap[view_review.creator.pk])
        )
        core_review.save()
        ReviewPkMap[view_review.pk] = core_review.pk
        core_review.labels.set([CoreLabel.objects.get(pk=LabelPkMap[label.pk]) for label in view_review.labels.all()])

    ViewGroupProfile = apps.get_model('view', 'GroupProfile')
    CoreGroupProfile = apps.get_model('core', 'GroupProfile')
    for view_group in ViewGroupProfile.objects.all().order_by('pk'):
        core_group = CoreGroupProfile(
            name=view_group.name,
            display_name=view_group.display_name,
            desc=view_group.desc,
            create_time=view_group.create_time
        )
        core_group.save()
        core_group.members.set([CoreUserProfile.objects.get(pk=UserProfilePkMap[member.pk]) for member in view_group.members.all()])
        core_group.reviews.set([CoreReview.objects.get(pk=ReviewPkMap[review.pk]) for review in view_group.reviews.all()])

    ViewCustomCheckInInterval = apps.get_model('view', 'CustomCheckInInterval')
    CoreCustomCheckInInterval = apps.get_model('core', 'CustomCheckInInterval')
    for view_interval in ViewCustomCheckInInterval.objects.all().order_by('pk'):
        core_interval = CoreCustomCheckInInterval(
            year=view_interval.year,
            month=view_interval.month,
            deadline=view_interval.deadline
        )
        core_interval.save()

    ViewPubMedIndex = apps.get_model('view', 'PubMedIndex')
    CorePubMedIndex = apps.get_model('core', 'PubMedIndex')
    for view_index in ViewPubMedIndex.objects.all().order_by('pk'):
        core_index = CorePubMedIndex(
            source=view_index.source,
            index=view_index.index,
            doi=view_index.doi,
            pmid=view_index.pmid
        )
        core_index.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(copy_data_from_view_to_core)
    ]
